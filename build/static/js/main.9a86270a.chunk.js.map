{"version":3,"sources":["sw-registration.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","AutoLogApp","value","handleChange","bind","e","this","setState","userInput","parsedInput","parseInt","isNaN","userInputShouldBeANum","target","customForm","className","id","enableBackground","height","viewBox","width","xmlns","d","onChange","type","placeholder","toLocaleString","data","map","part","index","initialValue","userValue","name","lifetime","info","isInfo","partLife","style","v","vmax","result","Math","floor","valueIntoPercent","color","autoPart","key","Component","ReactDom","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9a86270a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport ReactDom from \"react-dom\";\nimport * as serviceWorker from \"./sw-registration\";\n\n// CSS\nimport \"./assets/index.css\";\n\nimport data from \"./data/data.json\";\n\nclass AutoLogApp extends Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  state = {\n    value: 0,\n  };\n\n  handleChange(e) {\n    function userInputShouldBeANum(userInput) {\n      const parsedInput = parseInt(userInput);\n      const isNum = Boolean(!isNaN(parsedInput)) ? parsedInput : \"\";\n      return isNum;\n    }\n\n    this.setState({ value: userInputShouldBeANum(e.target.value) });\n  }\n\n  render() {\n    // CARD\n    const value = this.state.value;\n    const autoPart = ({ id, name, lifetime, info }) => {\n      const isInfo = info ? (\n        <div className=\"flex p-2 text-justify justify-center items-center space-x-3 \">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            className=\"flex-none fill-current text-gray-800 h-8 w-8 self-center\"\n          >\n            <path d=\"M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm-.001 5.75c.69 0 1.251.56 1.251 1.25s-.561 1.25-1.251 1.25-1.249-.56-1.249-1.25.559-1.25 1.249-1.25zm2.001 12.25h-4v-1c.484-.179 1-.201 1-.735v-4.467c0-.534-.516-.618-1-.797v-1h3v6.265c0 .535.517.558 1 .735v.999z\" />\n          </svg>\n          <p className=\"font-light text-sm \">{info}</p>\n        </div>\n      ) : (\n        <Fragment />\n      );\n\n      const partLife = { good: \"#059669\", worn: \"#f8961e\", danger: \"#f94144\" };\n\n      function compareLifetime(initialValue, userValue) {\n        if (initialValue <= userValue) {\n          return partLife.danger;\n        }\n        if (\n          initialValue > userValue &&\n          initialValue - userValue <= initialValue / 2\n        ) {\n          return partLife.worn;\n        }\n        if (initialValue > userValue && userValue < initialValue / 2) {\n          return partLife.good;\n        }\n      }\n\n      function valueIntoPercent(v, vmax) {\n        let result = Math.floor((v / vmax) * 100);\n        if (result >= 100) return \"100%\";\n        else return result + \"%\";\n      }\n\n      return (\n        <div className=\"\" key={id}>\n          <div\n            className=\"bg-white max-w-xs sm:max-w-md lg:max-w-lg md:max-w-lg shadow-lg  mx-auto rounded-2xl overflow-hidden  hover:shadow-2xl transition duration-500 transform hover:scale-105 cursor-pointer\"\n            id={id}\n          >\n            <div className=\"card flex flex-col h-32 md:h-32 justify-center items-center bg-cover bg-gray-600 bg-opacity-25 py-4\">\n              <h2 className=\"tracking-widest uppercase text-sm sm:text-xs md:text-xs\">\n                {name}\n              </h2>\n              <p className=\"font-bold text-xl\">\n                {lifetime.toLocaleString()} KM\n              </p>\n              <div className=\"mt-2 h-4 relative w-60 sm:w-36 rounded-full overflow-hidden\">\n                <div className=\" w-full h-full bg-white absolute \"></div>\n                <div\n                  className=\" h-full bg-gradient-to-r from-yellow-200 via-yellow-500 to-red-700 sm:bg-green-500 absolute\"\n                  style={{ width: valueIntoPercent(value, lifetime) }}\n                ></div>\n              </div>\n              <div\n                className=\"text-xs font-medium italic pt-2\"\n                style={{ color: compareLifetime(lifetime, value) }}\n              >\n                {value.toLocaleString()}/{lifetime.toLocaleString()}\n              </div>\n            </div>\n            <div className=\"flex px-4 h-24 sm:h-26 md:h-36 lg:h-36\">\n              {isInfo}\n            </div>\n          </div>\n        </div>\n      );\n    };\n\n    // USER INPUT FORM\n    const customForm = (\n      <fieldset className=\"p-4 text-center bg-yellow-500 grid grid-cols-1\">\n        <legend className=\"text-xl uppercase font-racing\">\n          Entrer son kilométrage\n        </legend>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2\">\n          <div className=\"flex justify-center sm:pb-4 items-center py-4\">\n            <div className=\"flex bg-gray-100 p-4 w-72 space-x-4 rounded-lg flex-row\">\n              <svg\n                id=\"Layer_1\"\n                className=\"h-6 w-6 opacity-30\"\n                enableBackground=\"new 0 0 512 512\"\n                height=\"512\"\n                viewBox=\"0 0 512 512\"\n                width=\"512\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <g>\n                  <path d=\"m304.2 425.767h-96.4c-8.284 0-15 6.716-15 15s6.716 15 15 15h96.4c8.284 0 15-6.716 15-15s-6.716-15-15-15z\" />\n                  <path d=\"m298.188 333.205c3.15-6.32 4.931-13.442 4.931-20.983 0-26.023-21.096-47.119-47.119-47.119-7.543 0-14.666 1.782-20.987 4.933l-70.654-70.657c-5.857-5.858-15.355-5.858-21.213 0-5.858 5.857-5.858 15.354 0 21.213l70.659 70.662c-3.145 6.316-4.923 13.433-4.923 20.968 0 26.023 21.096 47.119 47.119 47.119 7.537 0 14.655-1.779 20.972-4.925l16.621 16.623c5.858 5.858 15.354 5.86 21.213.002 5.858-5.857 5.859-15.354.001-21.213zm-42.188-3.864c-9.439 0-17.119-7.679-17.119-17.118s7.679-17.119 17.119-17.119 17.119 7.68 17.119 17.119-7.68 17.118-17.119 17.118z\" />\n                  <path d=\"m256 56.233c-141.159 0-256 114.841-256 256 0 44.99 11.862 89.257 34.305 128.017 4.146 7.16 13.308 9.609 20.474 5.476.003-.002 41.751-24.102 41.751-24.102 7.174-4.142 9.632-13.315 5.49-20.49-4.142-7.174-13.314-9.635-20.49-5.49l-28.332 16.357c-13.014-26.421-20.719-55.265-22.68-84.767h32.682c8.284 0 15-6.716 15-15s-6.716-15-15-15h-32.69c1.992-30.246 9.957-58.883 22.731-84.743l28.29 16.333c7.176 4.145 16.35 1.684 20.49-5.49 4.142-7.175 1.684-16.349-5.49-20.49l-28.255-16.314c16.445-24.478 37.544-45.577 62.022-62.022l16.312 28.252c4.142 7.175 13.316 9.635 20.49 5.49 7.174-4.143 9.632-13.316 5.49-20.49l-16.332-28.287c25.86-12.773 54.498-20.733 84.742-22.728v32.689c0 8.284 6.716 15 15 15s15-6.716 15-15v-32.689c30.244 1.995 58.882 9.956 84.742 22.728l-16.332 28.287c-4.142 7.174-1.684 16.348 5.49 20.49 7.174 4.145 16.348 1.685 20.49-5.49l16.312-28.252c24.478 16.444 45.578 37.543 62.022 62.022l-28.254 16.312c-7.174 4.142-9.632 13.315-5.49 20.49 4.141 7.174 13.314 9.635 20.49 5.49l28.29-16.333c12.773 25.86 20.739 54.497 22.731 84.743h-32.691c-8.284 0-15 6.716-15 15s6.716 15 15 15h32.682c-1.961 29.502-9.666 58.346-22.68 84.767l-28.332-16.357c-7.176-4.145-16.348-1.684-20.49 5.49-4.142 7.175-1.684 16.349 5.49 20.49 0 0 41.748 24.1 41.751 24.102 7.167 4.133 16.328 1.685 20.474-5.476 22.443-38.758 34.305-83.024 34.305-128.015 0-141.159-114.841-256-256-256z\" />\n                </g>\n              </svg>\n\n              <input\n                className=\"bg-gray-100 outline-none\"\n                value={value}\n                onChange={this.handleChange}\n                type=\"text\"\n                placeholder=\"Kilométrages de ma voiture...\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-center sm:pb-4 items-center py-4 px-2 uppercase font-light text-lg\">\n            Votre véhicule à\n            <span className=\"flex font-bold px-1\">\n              {value.toLocaleString()}\n            </span>\n            Km\n          </div>\n        </div>\n      </fieldset>\n    );\n\n    // MAIN CONTENT\n    return (\n      <main className=\"container\">\n        <h1 className=\"text-4xl font-extrabold text-center p-6 uppercase font-racing\">\n          AutoLog\n        </h1>\n        <p className=\"py-6 px-4 text-gray-800 text-center\">\n          Cette application n'a pas vocation à être fiable, elle permet\n          uniquement d'informer l'utilisateur via un code couleur sur l'usure\n          éventuelle des pièces de son véhicule basé sur son compteur\n          kilométrique.\n        </p>\n        {customForm}\n        <section className=\"p-8 grid gap-4 grid-cols-1 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-5\">\n          {data.map((part, index) => {\n            return autoPart({ ...part, key: index });\n          })}\n        </section>\n      </main>\n    );\n  }\n}\n\nReactDom.render(<AutoLogApp />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}